["^ ","~:output",["^ ","~:js","goog.provide('herb.runtime');\ngoog.require('cljs.core');\ngoog.require('goog.dom');\ngoog.require('goog.object');\ngoog.require('garden.core');\ngoog.require('garden.selectors');\nherb.runtime.dev_QMARK_ = goog.DEBUG;\nif((typeof herb !== 'undefined') && (typeof herb.runtime !== 'undefined') && (typeof herb.runtime.injected_styles !== 'undefined')){\n} else {\n/**\n * Atom containing all styles added to DOM. Takes the form of a map with\n *   classnames as keys. The map entry contains a `:data` which is Herb's\n *   representation of a style unit, `:data-string` which is what is used as the\n *   style data attribute in DOM, and `:css` which contains the rendered CSS\n *   string.\n */\nherb.runtime.injected_styles = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\nif((typeof herb !== 'undefined') && (typeof herb.runtime !== 'undefined') && (typeof herb.runtime.injected_keyframes !== 'undefined')){\n} else {\n/**\n * Atom containing all keyframe CSS added to DOM. Takes the form of a map\n *   with a namespace as a key. A map entry contains the keys `:data` which is herb's\n *   representation of a keyframe unit and `:css` which is the rendered CSS\n *   string\n */\nherb.runtime.injected_keyframes = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\nif((typeof herb !== 'undefined') && (typeof herb.runtime !== 'undefined') && (typeof herb.runtime.injected_global !== 'undefined')){\n} else {\n/**\n * Atom containing all global style added to DOM. Takes the form of a map\n *   with namespace as keys. A map entry contains `:data` which is a collection of\n *   global styles for a given via defglobal call and `:css` that contains the\n *   rendered CSS\n */\nherb.runtime.injected_global = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\nif((typeof herb !== 'undefined') && (typeof herb.runtime !== 'undefined') && (typeof herb.runtime.options !== 'undefined')){\n} else {\n/**\n * Atom containing a map with options passed from `herb.core/init!`.\n *   Entry includes `:vendors` and `:auto-prefix`\n */\nherb.runtime.options = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\n/**\n * Either update a style in state, or create it depending on existing state.\n */\nherb.runtime.update_state = (function herb$runtime$update_state(state,ident,p__27258,css){\nvar map__27259 = p__27258;\nvar map__27259__$1 = (((((!((map__27259 == null))))?(((((map__27259.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27259.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27259):map__27259);\nvar data = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27259__$1,new cljs.core.Keyword(null,\"data\",\"data\",-232669377));\nvar data_string = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27259__$1,new cljs.core.Keyword(null,\"data-string\",\"data-string\",1508502883));\nvar element = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27259__$1,new cljs.core.Keyword(null,\"element\",\"element\",1974019749));\nvar css__$1 = (function (){var temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(herb.runtime.injected_styles),ident);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar old = temp__5733__auto__;\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"css\",\"css\",1135045163).cljs$core$IFn$_invoke$arity$1(old)),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(css)].join('');\n} else {\nreturn css;\n}\n})();\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ident,new cljs.core.Keyword(null,\"data\",\"data\",-232669377),cljs.core.first(data)], null),cljs.core.last(data)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ident,new cljs.core.Keyword(null,\"data-string\",\"data-string\",1508502883)], null),data_string),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ident,new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null),element),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ident,new cljs.core.Keyword(null,\"css\",\"css\",1135045163)], null),css__$1);\n});\nherb.runtime.combinator_fns = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\">\",\">\",-555517146),garden.selectors._GT_,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),garden.selectors._PLUS_,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),garden.selectors._,new cljs.core.Keyword(null,\"descendant\",\"descendant\",188254602),garden.selectors.descendant], null);\n/**\n * Renders CSS, and appends to DOM. Ensure state is in sync with DOM.\n */\nherb.runtime.render_style_BANG_ = (function herb$runtime$render_style_BANG_(identifier,new$){\nvar style = (function (){var vec__27261 = new cljs.core.Keyword(null,\"data\",\"data\",-232669377).cljs$core$IFn$_invoke$arity$1(new$);\nvar classname = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27261,(0),null);\nvar map__27264 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27261,(1),null);\nvar map__27264__$1 = (((((!((map__27264 == null))))?(((((map__27264.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27264.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27264):map__27264);\nvar style = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"style\",\"style\",-496642736));\nvar pseudo = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"pseudo\",\"pseudo\",851696982));\nvar media = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"media\",\"media\",-1066138403));\nvar supports = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"supports\",\"supports\",1501242067));\nvar prefix = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465));\nvar vendors = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496));\nvar combinators = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27264__$1,new cljs.core.Keyword(null,\"combinators\",\"combinators\",-1995039000));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [classname,cljs.core.with_meta(style,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"prefix\",\"prefix\",-265908465),prefix,new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496),vendors], null)),pseudo,media,supports], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (vec__27261,classname,map__27264,map__27264__$1,style,pseudo,media,supports,prefix,vendors,combinators){\nreturn (function (p__27266){\nvar vec__27267 = p__27266;\nvar vec__27270 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27267,(0),null);\nvar seq__27271 = cljs.core.seq(vec__27270);\nvar first__27272 = cljs.core.first(seq__27271);\nvar seq__27271__$1 = cljs.core.next(seq__27271);\nvar combinator = first__27272;\nvar elements = seq__27271__$1;\nvar style__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27267,(1),null);\nvar temp__5733__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(herb.runtime.combinator_fns,combinator);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cfn = temp__5733__auto__;\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cfn,classname,elements),style__$1], null);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Unsupported combinator function \",new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"combinator\",\"combinator\",1907795941),combinator,new cljs.core.Keyword(null,\"elements\",\"elements\",657646735),elements,new cljs.core.Keyword(null,\"style\",\"style\",-496642736),style__$1], null));\n}\n});})(vec__27261,classname,map__27264,map__27264__$1,style,pseudo,media,supports,prefix,vendors,combinators))\n,combinators)], null)], null);\n})();\nvar css_str = garden.core.css.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496),cljs.core.seq(new cljs.core.Keyword(null,\"vendors\",\"vendors\",-153040496).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(herb.runtime.options))),new cljs.core.Keyword(null,\"pretty-print?\",\"pretty-print?\",1932217158),herb.runtime.dev_QMARK_,new cljs.core.Keyword(null,\"auto-prefix\",\"auto-prefix\",1484803466),cljs.core.seq(new cljs.core.Keyword(null,\"auto-prefix\",\"auto-prefix\",1484803466).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(herb.runtime.options)))], null),style], 0));\nvar G__27273_27301 = new cljs.core.Keyword(null,\"element\",\"element\",1974019749).cljs$core$IFn$_invoke$arity$1(new$);\nvar G__27274_27302 = [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(css_str)].join('');\ngoog.dom.append(G__27273_27301,G__27274_27302);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(herb.runtime.injected_styles,herb.runtime.update_state,identifier,new$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([css_str], 0));\n});\n/**\n * Create an element in the DOM with an optional data-herb attribute\n */\nherb.runtime.create_element_BANG_ = (function herb$runtime$create_element_BANG_(attr){\nvar head = document.head;\nif((!((head == null)))){\n} else {\nthrow (new Error([\"Assert failed: \",\"An head element is required in the dom to inject the style.\",\"\\n\",\"(some? head)\"].join('')));\n}\n\nvar element = document.createElement(\"style\");\nelement.setAttribute(\"type\",\"text/css\");\n\nif(cljs.core.truth_(attr)){\nelement.setAttribute(\"data-herb\",attr);\n} else {\n}\n\nhead.appendChild(element);\n\nreturn element;\n});\n/**\n * Create a style element in head if identifier is not already present Attach a\n *   data attr with namespace and call render-style with new element\n */\nherb.runtime.create_style_BANG_ = (function herb$runtime$create_style_BANG_(identifier,new$,data_str){\nvar element = herb.runtime.create_element_BANG_(data_str);\nreturn herb.runtime.render_style_BANG_(identifier,(function (){var G__27275 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"data\",\"data\",-232669377),new$,new cljs.core.Keyword(null,\"element\",\"element\",1974019749),element], null);\nif(cljs.core.truth_(data_str)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__27275,new cljs.core.Keyword(null,\"data-string\",\"data-string\",1508502883),data_str);\n} else {\nreturn G__27275;\n}\n})());\n});\n/**\n * Main interface to runtime. Takes an identifier, new garden style data\n *   structure, fully qualified name. Make sure to add style only where\n *   necessary. Returns the injected style state object.\n */\nherb.runtime.inject_style_BANG_ = (function herb$runtime$inject_style_BANG_(identifier,new$,data_str){\nvar injected = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(herb.runtime.injected_styles),identifier);\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"data\",\"data\",-232669377).cljs$core$IFn$_invoke$arity$1(injected),cljs.core.first(new$));\nif(cljs.core.not(injected)){\nherb.runtime.create_style_BANG_(identifier,new$,data_str);\n} else {\nif((((!((injected == null)))) && (cljs.core.not(target)))){\nherb.runtime.render_style_BANG_(identifier,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"data\",\"data\",-232669377),new$,new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Keyword(null,\"element\",\"element\",1974019749).cljs$core$IFn$_invoke$arity$1(injected),new cljs.core.Keyword(null,\"data-string\",\"data-string\",1508502883),data_str], null));\n} else {\n}\n}\n\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(herb.runtime.injected_styles),identifier);\n});\n/**\n * Inject collection of style objects in a common element, used by passing a\n *   dispatch in the form of :keyframes or :global\n */\nherb.runtime.inject_obj_BANG_ = (function herb$runtime$inject_obj_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___27303 = arguments.length;\nvar i__4731__auto___27304 = (0);\nwhile(true){\nif((i__4731__auto___27304 < len__4730__auto___27303)){\nargs__4736__auto__.push((arguments[i__4731__auto___27304]));\n\nvar G__27305 = (i__4731__auto___27304 + (1));\ni__4731__auto___27304 = G__27305;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn herb.runtime.inject_obj_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nherb.runtime.inject_obj_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (sym,dispatch,obj){\nvar state = (function (){var G__27281 = dispatch;\nvar G__27281__$1 = (((G__27281 instanceof cljs.core.Keyword))?G__27281.fqn:null);\nswitch (G__27281__$1) {\ncase \"global\":\nreturn herb.runtime.injected_global;\n\nbreak;\ncase \"keyframes\":\nreturn herb.runtime.injected_keyframes;\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__27281__$1)].join('')));\n\n}\n})();\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"data\",\"data\",-232669377).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),sym)),obj)){\nreturn null;\n} else {\nvar css_str = garden.core.css.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"pretty-print?\",\"pretty-print?\",1932217158),herb.runtime.dev_QMARK_], null),obj], 0));\nvar element_27307 = (function (){var or__4131__auto__ = document.querySelector([\"style[data-herb=\\\"\",cljs.core.name(dispatch),\"\\\"]\"].join(''));\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn herb.runtime.create_element_BANG_(cljs.core.name(dispatch));\n}\n})();\nvar inner_html_27308 = goog.object.get(element_27307,\"innerHTML\");\nvar G__27283_27309 = element_27307;\nvar G__27284_27310 = \"innerHTML\";\nvar G__27285_27311 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(inner_html_27308),(cljs.core.truth_(herb.runtime.dev_QMARK_)?\"\\n\":null),cljs.core.str.cljs$core$IFn$_invoke$arity$1(css_str)].join('');\ngoog.object.set(G__27283_27309,G__27284_27310,G__27285_27311);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc,sym,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"data\",\"data\",-232669377),obj,new cljs.core.Keyword(null,\"css\",\"css\",1135045163),css_str], null));\n}\n});\n\nherb.runtime.inject_obj_BANG_.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nherb.runtime.inject_obj_BANG_.cljs$lang$applyTo = (function (seq27277){\nvar G__27278 = cljs.core.first(seq27277);\nvar seq27277__$1 = cljs.core.next(seq27277);\nvar G__27279 = cljs.core.first(seq27277__$1);\nvar seq27277__$2 = cljs.core.next(seq27277__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__27278,G__27279,seq27277__$2);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","herb/runtime.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$herb.runtime","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$goog.dom","^M","~$dom","^M","~$cljs.core","^O","~$gobj","~$goog.object","~$goog","^R","^Q","^Q","~$garden.selectors","^S","~$s","^S","~$garden.core","^T"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$css","^T"],"~:require-macros",["^ ","^O","^O","^S","^S","~$s","^S"],"~:form",["~#list",["~$ns","^H",["^[",["^V",["^M","~:as","^N"],["^Q","^11","^P"],["^T","~:refer",["^X"]],["^S","^11","~$s"]]]]],"~:flags",["^ ","^V",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^R","^O","^M","^Q","^T","^S"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","herb/runtime.cljs"],"~:compiled-at",1570835804707,"~:resource-name","herb/runtime.cljs","~:warnings",[],"~:source","(ns herb.runtime\n  (:require [goog.dom :as dom]\n            [goog.object :as gobj]\n            [garden.core :refer [css]]\n            [garden.selectors :as s]))\n\n(def dev? ^boolean js/goog.DEBUG)\n\n(defonce\n  ^{:private true\n    :doc \"Atom containing all styles added to DOM. Takes the form of a map with\n  classnames as keys. The map entry contains a `:data` which is Herb's\n  representation of a style unit, `:data-string` which is what is used as the\n  style data attribute in DOM, and `:css` which contains the rendered CSS\n  string.\"}\n  injected-styles (atom {}))\n\n(defonce\n  ^{:private true\n    :doc \"Atom containing all keyframe CSS added to DOM. Takes the form of a map\n  with a namespace as a key. A map entry contains the keys `:data` which is herb's\n  representation of a keyframe unit and `:css` which is the rendered CSS\n  string\"}\n  injected-keyframes (atom {}))\n\n(defonce\n  ^{:private true\n    :doc \"Atom containing all global style added to DOM. Takes the form of a map\n  with namespace as keys. A map entry contains `:data` which is a collection of\n  global styles for a given via defglobal call and `:css` that contains the\n  rendered CSS\"}\n  injected-global (atom {}))\n\n(defonce\n  ^{:doc \"Atom containing a map with options passed from `herb.core/init!`.\n  Entry includes `:vendors` and `:auto-prefix`\"}\n  options (atom {}))\n\n(defn- update-state\n  \"Either update a style in state, or create it depending on existing state.\"\n  [state ident {:keys [data data-string element]} css]\n  (let [css (if-let [old (get @injected-styles ident)]\n              (str (:css old) \"\\n\" css)\n              css)]\n    (-> (assoc-in state [ident :data (first data)] (last data))\n        (assoc-in [ident :data-string] data-string)\n        (assoc-in [ident :element] element)\n        (assoc-in [ident :css] css))))\n\n(def combinator-fns\n  {:> s/>\n   :+ s/+\n   :- s/-\n   :descendant s/descendant})\n\n(defn- render-style!\n  \"Renders CSS, and appends to DOM. Ensure state is in sync with DOM.\"\n  [identifier new]\n  (let [style (let [[classname {:keys [style pseudo media supports prefix vendors combinators]}] (:data new)]\n                [[classname (with-meta style {:prefix prefix :vendors vendors})\n                  pseudo media supports]\n                 [(map (fn [[[combinator & elements] style]]\n                         (if-let [cfn (get combinator-fns combinator)]\n                           [(apply cfn classname elements) style]\n                           (throw (ex-info \"Unsupported combinator function \"\n                                           {:combinator combinator\n                                            :elements elements\n                                            :style style}))))\n                       combinators)]])\n        css-str (css {:vendors (seq (:vendors @options))\n                      :pretty-print? dev?\n                      :auto-prefix (seq (:auto-prefix @options))}\n                     style)]\n    (dom/append (:element new) (str \"\\n\" css-str))\n    (swap! injected-styles update-state identifier new css-str)))\n\n\n(defn- create-element!\n  \"Create an element in the DOM with an optional data-herb attribute\"\n  [attr]\n  (let [head (.-head js/document)]\n    (assert (some? head) \"An head element is required in the dom to inject the style.\")\n    (let [element (.createElement js/document \"style\")]\n      (.setAttribute element \"type\" \"text/css\")\n      (when attr\n        (.setAttribute element \"data-herb\" attr))\n      (.appendChild head element)\n      element)))\n\n(defn- create-style!\n  \"Create a style element in head if identifier is not already present Attach a\n  data attr with namespace and call render-style with new element\"\n  [identifier new data-str]\n  (let [element (create-element! data-str)]\n    (render-style! identifier (cond-> {:data new :element element}\n                                data-str (assoc :data-string data-str)))))\n\n\n(defn inject-style!\n  \"Main interface to runtime. Takes an identifier, new garden style data\n  structure, fully qualified name. Make sure to add style only where\n  necessary. Returns the injected style state object.\"\n  [identifier new data-str]\n  (let [injected (get @injected-styles identifier)\n        target (get (:data injected) (first new))]\n    (cond\n      (not injected)\n      (create-style! identifier new data-str)\n\n      (and (some? injected)\n           (not target))\n      (render-style!\n       identifier\n       {:data new\n        :element (:element injected)\n        :data-string data-str}))\n\n    (get @injected-styles identifier)))\n\n(defn inject-obj!\n  \"Inject collection of style objects in a common element, used by passing a\n  dispatch in the form of :keyframes or :global\"\n  [sym dispatch & obj]\n  (let [state (case dispatch\n                :global injected-global\n                :keyframes injected-keyframes)]\n    (when-not (= (:data (get @state sym)) obj)\n      (let [css-str (css {:pretty-print? dev?} obj)]\n        (let [element (or (.querySelector js/document (str \"style[data-herb=\\\"\" (name dispatch) \"\\\"]\"))\n                          (create-element! (name dispatch)))\n              inner-html (gobj/get element \"innerHTML\")]\n          (gobj/set element \"innerHTML\" (str inner-html (when dev? \"\\n\") css-str)))\n        (swap! state assoc sym {:data obj :css css-str})))))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["herb.runtime/dev?","js/goog.DEBUG","js/herb","js/herb.runtime","js/herb.runtime.injected-styles","herb.runtime/injected-styles","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/herb.runtime.injected-keyframes","herb.runtime/injected-keyframes","js/herb.runtime.injected-global","herb.runtime/injected-global","js/herb.runtime.options","herb.runtime/options","p__27258","map__27259","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","herb.runtime/update-state","state","ident","data","data-string","element","css","temp__5733__auto__","old","cljs.core/deref","cljs.core/assoc-in","cljs.core/first","cljs.core/last","herb.runtime/combinator-fns","garden.selectors/>","garden.selectors/+","garden.selectors/-","garden.selectors/descendant","herb.runtime/render-style!","identifier","new","style","vec__27261","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__27264","classname","pseudo","media","supports","prefix","vendors","combinators","cljs.core/with-meta","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__27266","vec__27267","vec__27270","seq__27271","cljs.core/seq","first__27272","cljs.core/next","combinator","elements","cfn","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","css-str","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","G__27273","G__27274","goog.dom/append","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","herb.runtime/create-element!","attr","head","js/document","js/Error","herb.runtime/create-style!","data-str","G__27275","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","herb.runtime/inject-style!","injected","target","cljs.core/not","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","herb.runtime/inject-obj!","seq27277","G__27278","G__27279","self__4717__auto__","sym","dispatch","obj","G__27281","cljs.core/Keyword","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","or__4131__auto__","cljs.core/name","inner-html","goog.object/get","G__27283","G__27284","G__27285","goog.object/set","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc"]]],"~:cache-keys",["~#cmap",[["^17","goog/dom/tagname.js"],[1559507890775,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^17","goog/labs/useragent/platform.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","~$goog.labs.userAgent.util","~$goog.string"]]],["~:macro","^O"],[1556316222000],["^17","cljs/tools/reader/impl/utils.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","~$clojure.string","^1J"]]],["^17","goog/math/math.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","~$goog.array","~$goog.asserts"]]],["^17","goog/string/stringformat.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1J"]]],["^17","goog/labs/useragent/browser.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1I","^Q","~$goog.string.internal"]]],["^17","goog/html/safeurl.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1O"]]],["^17","herb/runtime.cljs"],[1569047779958,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^M","^Q","^T","^S"]]],["^17","goog/array/array.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N"]]],["^17","garden/color.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1L","~$garden.util"]]],["^17","goog/useragent/useragent.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^1I","~$goog.reflect","^1J"]]],["^1K","~$cljs.tools.reader.reader-types"],[1559507883000],["^17","goog/debug/error.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","garden/units.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","~$cljs.reader","~$garden.types","^1V"]]],["^1K","~$garden.compiler"],[1569047779000],["^17","cljs/tools/reader/edn.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","~$cljs.tools.reader.impl.errors","^1[","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1J","~$goog.string.StringBuffer"]]],["^17","goog/dom/nodetype.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","cljs/tools/reader/impl/inspect.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O"]]],["^17","cljs/tools/reader.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1[","^24","^25","^23","^1M","^1J","^27"]]],["^1K","~$garden.color"],[1569047779000],["^17","goog/string/typedstring.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/object/object.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/dom/asserts.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N"]]],"~:SHADOW-TIMESTAMP",[1570818000000,1556316222000],["^17","goog/math/long.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","^1Z"]]],["^17","goog/html/trustedresourceurl.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","^1R","^1S","^1T","^1U"]]],["^1K","^S"],[1569047779000],["^17","goog/string/internal.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/functions/functions.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/html/safestyle.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","~$goog.html.SafeUrl","^1T","^1U","^1O"]]],["^17","goog/dom/safe.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2:","^1Q","^1T","^1O"]]],["^17","goog/structs/map.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^17","goog/html/safehtml.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","~$goog.dom.TagName","~$goog.dom.tags","^2>","^2?","~$goog.html.SafeStyleSheet","^2:","^1Q","^1R","^1S","^1W","^Q","^1T","^1U","^1O"]]],["^17","goog/dom/tags.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^Q"]]],["^17","goog/math/size.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/labs/useragent/engine.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1I","^1J"]]],["^17","garden/core.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^22"]]],["^17","cljs/reader.cljs"],[1556316222100,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^Q","^26","~$cljs.tools.reader.edn","^27"]]],["^17","goog/dom/dom.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^2B","~$goog.dom.safe","^2=","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^Q","^1J","~$goog.string.Unicode","~$goog.userAgent"]]],["^17","goog/asserts/asserts.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","~$goog.debug.Error","^2G"]]],["^17","garden/types.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O"]]],["^17","goog/uri/uri.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","^1J","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/i18n/bidi.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","garden/selectors.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1L"]]],["^17","goog/fs/url.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/base.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",[]]],["^17","garden/util.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1L","^21","^1J","~$goog.string.format"]]],["^17","garden/compression.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O"]]],["^17","goog/structs/structs.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^Q"]]],["^17","cljs/tools/reader/impl/errors.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1[","^1L","~$cljs.tools.reader.impl.inspect"]]],["^17","clojure/string.cljs"],[1556316222100,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1J","^27"]]],["^17","goog/string/string.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1O"]]],["^17","goog/reflect/reflect.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/labs/useragent/util.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1O"]]],["^17","goog/string/stringbuffer.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/math/coordinate.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","~$goog.math"]]],["^17","cljs/tools/reader/reader_types.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^24","^1J","^27"]]],["^17","goog/iter/iter.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","^2<","^2V"]]],["^17","goog/html/uncheckedconversions.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","^2=","^2>","^2?","^2D","^2:","^1Q","^1T","^1O"]]],["^17","cljs/tools/reader/impl/commons.cljs"],[1559507883302,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^23","^1[","^24"]]],["^17","goog/dom/htmlelement.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","cljs/core.cljs"],[1556316222100,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["~$goog.math.Long","~$goog.math.Integer","^1J","^Q","^1M","~$goog.Uri","^27"]]],["^17","goog/html/safescript.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","^1T","^1U"]]],["^17","goog/html/safestylesheet.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","^2?","^Q","^1T","^1U","^1O"]]],["^17","goog/math/integer.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R"]]],["^17","goog/dom/browserfeature.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^2M"]]],["^17","goog/uri/utils.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1M","^1N","^1J"]]],["^17","goog/string/const.js"],[1559507890775,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^1N","^1U"]]],["^17","garden/compiler.cljc"],[1569047779983,"^1D",["^ ","^1E",null,"^1F",["^F",[]],"^1G",["^R","^O","^1L","^28","~$garden.compression","^S","~$garden.units","^1V","^21"]]],["^1K","^2["],[1569047779000],["^1K","^20"],[1556316222000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","herb/runtime.cljs","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O","^P","^Q","^R","^R","^Q","^Q","^S","^S","~$s","^S","^T","^T"],"^U",["^F",["^V"]],"~:shadow/js-access-global",["^F",["document","Error"]],"^W",["^ ","^X","^T"],"~:defs",["^ ","~$options",["^ ","^5",["^ ","^6","herb/runtime.cljs","^7",37,"^8",3,"^9",37,"^:",10,"~:doc","Atom containing a map with options passed from `herb.core/init!`.\n  Entry includes `:vendors` and `:auto-prefix`"],"^G","~$herb.runtime/options","^6","herb/runtime.cljs","^:",10,"^8",1,"^7",34,"^9",37,"~:tag","~$cljs.core/Atom","^34","Atom containing a map with options passed from `herb.core/init!`.\n  Entry includes `:vendors` and `:auto-prefix`"],"~$update-state",["^ ","~:protocol-inline",null,"^5",["^ ","^6","herb/runtime.cljs","^7",39,"^8",8,"^9",39,"^:",20,"~:private",true,"~:arglists",["^[",["~$quote",["^[",[["~$state","~$ident",["^ ","~:keys",["~$data","~$data-string","~$element"]],"^X"]]]]],"^34","Either update a style in state, or create it depending on existing state."],"^3:",true,"^G","~$herb.runtime/update-state","^6","herb/runtime.cljs","^:",20,"~:method-params",["^[",[["^3=","^3>","~$p__27258","^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^8",1,"~:variadic?",false,"^7",39,"~:ret-tag",["^F",["~$clj","~$any"]],"^9",39,"~:max-fixed-arity",4,"~:fn-var",true,"^3;",["^[",["^3<",["^[",[["^3=","^3>",["^ ","^3?",["^3@","^3A","^3B"]],"^X"]]]]],"^34","Either update a style in state, or create it depending on existing state."],"~$create-element!",["^ ","^39",null,"^5",["^ ","^6","herb/runtime.cljs","^7",78,"^8",8,"^9",78,"^:",23,"^3:",true,"^3;",["^[",["^3<",["^[",[["~$attr"]]]]],"^34","Create an element in the DOM with an optional data-herb attribute"],"^3:",true,"^G","~$herb.runtime/create-element!","^6","herb/runtime.cljs","^:",23,"^3D",["^[",[["^3O"]]],"^3F",null,"^3G",["^[",[null,null]],"^8",1,"^3H",false,"^7",78,"^3I","~$js","^9",78,"^3L",1,"^3M",true,"^3;",["^[",["^3<",["^[",[["^3O"]]]]],"^34","Create an element in the DOM with an optional data-herb attribute"],"~$create-style!",["^ ","^39",null,"^5",["^ ","^6","herb/runtime.cljs","^7",90,"^8",8,"^9",90,"^:",21,"^3:",true,"^3;",["^[",["^3<",["^[",[["~$identifier","~$new","~$data-str"]]]]],"^34","Create a style element in head if identifier is not already present Attach a\n  data attr with namespace and call render-style with new element"],"^3:",true,"^G","~$herb.runtime/create-style!","^6","herb/runtime.cljs","^:",21,"^3D",["^[",[["^3S","^3T","^3U"]]],"^3F",null,"^3G",["^[",[null,null]],"^8",1,"^3H",false,"^7",90,"^3I",["^F",[null,"^3K"]],"^9",90,"^3L",3,"^3M",true,"^3;",["^[",["^3<",["^[",[["^3S","^3T","^3U"]]]]],"^34","Create a style element in head if identifier is not already present Attach a\n  data attr with namespace and call render-style with new element"],"~$dev?",["^ ","^G","~$herb.runtime/dev?","^6","herb/runtime.cljs","^7",7,"^8",1,"^9",7,"^:",10,"^5",["^ ","^6","herb/runtime.cljs","^7",7,"^8",6,"^9",7,"^:",10],"^36","^3Q"],"~$combinator-fns",["^ ","^G","~$herb.runtime/combinator-fns","^6","herb/runtime.cljs","^7",50,"^8",1,"^9",50,"^:",20,"^5",["^ ","^6","herb/runtime.cljs","^7",50,"^8",6,"^9",50,"^:",20],"^36","~$cljs.core/IMap"],"~$injected-global",["^ ","^5",["^ ","^6","herb/runtime.cljs","^7",32,"^8",3,"^9",32,"^:",18,"^3:",true,"^34","Atom containing all global style added to DOM. Takes the form of a map\n  with namespace as keys. A map entry contains `:data` which is a collection of\n  global styles for a given via defglobal call and `:css` that contains the\n  rendered CSS"],"^3:",true,"^G","~$herb.runtime/injected-global","^6","herb/runtime.cljs","^:",18,"^8",1,"^7",26,"^9",32,"^36","^37","^34","Atom containing all global style added to DOM. Takes the form of a map\n  with namespace as keys. A map entry contains `:data` which is a collection of\n  global styles for a given via defglobal call and `:css` that contains the\n  rendered CSS"],"~$injected-styles",["^ ","^5",["^ ","^6","herb/runtime.cljs","^7",16,"^8",3,"^9",16,"^:",18,"^3:",true,"^34","Atom containing all styles added to DOM. Takes the form of a map with\n  classnames as keys. The map entry contains a `:data` which is Herb's\n  representation of a style unit, `:data-string` which is what is used as the\n  style data attribute in DOM, and `:css` which contains the rendered CSS\n  string."],"^3:",true,"^G","~$herb.runtime/injected-styles","^6","herb/runtime.cljs","^:",18,"^8",1,"^7",9,"^9",16,"^36","^37","^34","Atom containing all styles added to DOM. Takes the form of a map with\n  classnames as keys. The map entry contains a `:data` which is Herb's\n  representation of a style unit, `:data-string` which is what is used as the\n  style data attribute in DOM, and `:css` which contains the rendered CSS\n  string."],"~$injected-keyframes",["^ ","^5",["^ ","^6","herb/runtime.cljs","^7",24,"^8",3,"^9",24,"^:",21,"^3:",true,"^34","Atom containing all keyframe CSS added to DOM. Takes the form of a map\n  with a namespace as a key. A map entry contains the keys `:data` which is herb's\n  representation of a keyframe unit and `:css` which is the rendered CSS\n  string"],"^3:",true,"^G","~$herb.runtime/injected-keyframes","^6","herb/runtime.cljs","^:",21,"^8",1,"^7",18,"^9",24,"^36","^37","^34","Atom containing all keyframe CSS added to DOM. Takes the form of a map\n  with a namespace as a key. A map entry contains the keys `:data` which is herb's\n  representation of a keyframe unit and `:css` which is the rendered CSS\n  string"],"~$inject-obj!",["^ ","^39",null,"^5",["^ ","^6","herb/runtime.cljs","^7",120,"^8",7,"^9",120,"^:",18,"^3;",["^[",["^3<",["^[",[["~$sym","~$dispatch","~$&","~$obj"]]]]],"^34","Inject collection of style objects in a common element, used by passing a\n  dispatch in the form of :keyframes or :global","~:top-fn",["^ ","^3H",true,"~:fixed-arity",2,"^3L",2,"^3D",[["^[",["^47","^48","^49"]]],"^3;",["^[",[["^47","^48","~$&","^49"]]],"^3G",["^[",[null]]]],"^G","~$herb.runtime/inject-obj!","^6","herb/runtime.cljs","^:",18,"^4:",["^ ","^3H",true,"^4;",2,"^3L",2,"^3D",[["^[",["^47","^48","^49"]]],"^3;",["^[",[["^47","^48","~$&","^49"]]],"^3G",["^[",[null]]],"^3D",[["^[",["^47","^48","^49"]]],"^3F",null,"^4;",2,"^3G",["^[",[null]],"^8",1,"^3H",true,"~:methods",[["^ ","^4;",2,"^3H",true,"^36",["^F",[null,"^3K","~$clj-nil"]]]],"^7",120,"^3I","^3K","^9",120,"^3L",2,"^3M",true,"^3;",["^[",[["^47","^48","~$&","^49"]]],"^34","Inject collection of style objects in a common element, used by passing a\n  dispatch in the form of :keyframes or :global"],"~$render-style!",["^ ","^39",null,"^5",["^ ","^6","herb/runtime.cljs","^7",56,"^8",8,"^9",56,"^:",21,"^3:",true,"^3;",["^[",["^3<",["^[",[["^3S","^3T"]]]]],"^34","Renders CSS, and appends to DOM. Ensure state is in sync with DOM."],"^3:",true,"^G","~$herb.runtime/render-style!","^6","herb/runtime.cljs","^:",21,"^3D",["^[",[["^3S","^3T"]]],"^3F",null,"^3G",["^[",[null,null]],"^8",1,"^3H",false,"^7",56,"^3I",["^F",[null,"^3K"]],"^9",56,"^3L",2,"^3M",true,"^3;",["^[",["^3<",["^[",[["^3S","^3T"]]]]],"^34","Renders CSS, and appends to DOM. Ensure state is in sync with DOM."],"~$inject-style!",["^ ","^39",null,"^5",["^ ","^6","herb/runtime.cljs","^7",99,"^8",7,"^9",99,"^:",20,"^3;",["^[",["^3<",["^[",[["^3S","^3T","^3U"]]]]],"^34","Main interface to runtime. Takes an identifier, new garden style data\n  structure, fully qualified name. Make sure to add style only where\n  necessary. Returns the injected style state object."],"^G","~$herb.runtime/inject-style!","^6","herb/runtime.cljs","^:",20,"^3D",["^[",[["^3S","^3T","^3U"]]],"^3F",null,"^3G",["^[",[null,null]],"^8",1,"^3H",false,"^7",99,"^3I",["^F",["^3K","^4>"]],"^9",99,"^3L",3,"^3M",true,"^3;",["^[",["^3<",["^[",[["^3S","^3T","^3U"]]]]],"^34","Main interface to runtime. Takes an identifier, new garden style data\n  structure, fully qualified name. Make sure to add style only where\n  necessary. Returns the injected style state object."]],"^Y",["^ ","^O","^O","^S","^S","~$s","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^F",["~:data-string","~:element","~:combinator","~:>","~:pretty-print?","~:combinators","~:-","~:descendant","~:auto-prefix","~:css","~:elements","~:prefix","~:style","~:vendors","~:+","~:supports","~:pseudo","~:media","~:data"]],"~:order",["^4S","^4D","^4E","^4K","~:>","~:+","~:-","^4I","^4N","^4Q","^4R","^4P","^4M","^4O","^4H","^4F","^4L","^4G","^4J"]],"^13",["^ ","^V",["^F",[]]],"^14",["^ "],"^15",["^R","^O","^M","^Q","^T","^S"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^4W","~:static-fns"],true,["^4W","~:elide-asserts"],false,["^4W","~:optimize-constants"],null,["^4W","^1:"],null,["^4W","~:external-config"],null,["^4W","~:tooling-config"],null,["^4W","~:emit-constants"],null,["^4W","~:load-tests"],null,["^4W","~:infer-externs"],true,["^4W","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4W","~:fn-invoke-direct"],null,["^4W","~:source-map"],"/dev/null"]]]