["^ ","~:output",["^ ","~:js","goog.provide('garden.compression');\ngoog.require('cljs.core');\n/**\n * Return a function which when given a string will return a map\n *   containing the chunk of text matched by re, it's size, and tag.\n */\ngarden.compression.token_fn = (function garden$compression$token_fn(p__25548){\nvar vec__25550 = p__25548;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25550,(0),null);\nvar re = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__25550,(1),null);\nreturn ((function (vec__25550,tag,re){\nreturn (function (s){\nvar temp__5735__auto__ = cljs.core.re_find(re,s);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar chunk = temp__5735__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),tag,new cljs.core.Keyword(null,\"chunk\",\"chunk\",-1191159620),chunk,new cljs.core.Keyword(null,\"size\",\"size\",1098693007),cljs.core.count(chunk)], null);\n} else {\nreturn null;\n}\n});\n;})(vec__25550,tag,re))\n});\n/**\n * Given an arbitrary number of [tag regex] pairs, return a function\n *   which when given a string s will return the first matching token of s.\n *   Token precedence is determined by the order of the pairs. The first\n *   and last pairs have the highest and lowest precedence respectively.\n */\ngarden.compression.tokenizer = (function garden$compression$tokenizer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___25572 = arguments.length;\nvar i__4731__auto___25573 = (0);\nwhile(true){\nif((i__4731__auto___25573 < len__4730__auto___25572)){\nargs__4736__auto__.push((arguments[i__4731__auto___25573]));\n\nvar G__25574 = (i__4731__auto___25573 + (1));\ni__4731__auto___25573 = G__25574;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ngarden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic = (function (tags_PLUS_regexes){\nvar fs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compression.token_fn,tags_PLUS_regexes);\nreturn ((function (fs){\nreturn (function (s){\nreturn cljs.core.some(((function (fs){\nreturn (function (p1__25553_SHARP_){\nreturn (p1__25553_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__25553_SHARP_.cljs$core$IFn$_invoke$arity$1(s) : p1__25553_SHARP_.call(null,s));\n});})(fs))\n,fs);\n});\n;})(fs))\n});\n\ngarden.compression.tokenizer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ngarden.compression.tokenizer.cljs$lang$applyTo = (function (seq25555){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq25555));\n});\n\n/**\n * Tokenizer used during stylesheet compression.\n */\ngarden.compression.stylesheet_tokenizer = garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),/^\\\"(?:\\\\.|[^\\\"])*\\\"/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"r-brace\",\"r-brace\",-1335738887),/^\\s*\\{\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"l-brace\",\"l-brace\",613286657),/^;?\\s*}/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"r-paren\",\"r-paren\",-1688338021),/^\\s*\\(\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"l-paren\",\"l-paren\",2052672514),/^\\s*\\)/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"comma\",\"comma\",1699024745),/^,\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"colon\",\"colon\",-965200945),/^:\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"semicolon\",\"semicolon\",797086549),/^;/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),/^and\\s+/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"space+\",\"space+\",378127624),/^ +/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"white-space+\",\"white-space+\",1452157162),/^\\s+/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"any\",\"any\",1705907423),/^./], null)], 0));\n/**\n * Compress a string of CSS using a basic compressor.\n */\ngarden.compression.compress_stylesheet = (function garden$compression$compress_stylesheet(stylesheet){\nvar s1 = stylesheet;\nvar s2 = \"\";\nwhile(true){\nvar temp__5733__auto__ = (garden.compression.stylesheet_tokenizer.cljs$core$IFn$_invoke$arity$1 ? garden.compression.stylesheet_tokenizer.cljs$core$IFn$_invoke$arity$1(s1) : garden.compression.stylesheet_tokenizer.call(null,s1));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar map__25560 = temp__5733__auto__;\nvar map__25560__$1 = (((((!((map__25560 == null))))?(((((map__25560.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__25560.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__25560):map__25560);\nvar tag = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25560__$1,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223));\nvar chunk = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25560__$1,new cljs.core.Keyword(null,\"chunk\",\"chunk\",-1191159620));\nvar size = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__25560__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar G__25586 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s1,size);\nvar G__25587 = [s2,cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__25564 = tag;\nvar G__25564__$1 = (((G__25564 instanceof cljs.core.Keyword))?G__25564.fqn:null);\nswitch (G__25564__$1) {\ncase \"string\":\nreturn chunk;\n\nbreak;\ncase \"r-brace\":\nreturn \"{\";\n\nbreak;\ncase \"l-brace\":\nreturn \"}\";\n\nbreak;\ncase \"r-paren\":\nreturn \"(\";\n\nbreak;\ncase \"l-paren\":\nreturn \")\";\n\nbreak;\ncase \"and\":\nreturn \"and \";\n\nbreak;\ncase \"comma\":\nreturn \",\";\n\nbreak;\ncase \"semi-comma\":\nreturn \";\";\n\nbreak;\ncase \"colon\":\nreturn \":\";\n\nbreak;\ncase \"space+\":\nreturn \" \";\n\nbreak;\ncase \"white-space+\":\nreturn \"\";\n\nbreak;\ndefault:\nreturn chunk;\n\n}\n})())].join('');\ns1 = G__25586;\ns2 = G__25587;\ncontinue;\n} else {\nreturn s2;\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Stylesheet compression utilities.","~:file","garden/compression.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",23],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$garden.compression","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^N","~$goog","^O"],"~:seen",["^G",[]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^I","Stylesheet compression utilities."]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^O","^N"]],"^K","^I","~:resource-id",["~:shadow.build.classpath/resource","garden/compression.cljc"],"~:compiled-at",1570835800360,"~:resource-name","garden/compression.cljc","~:warnings",[],"~:source","(ns garden.compression\n  \"Stylesheet compression utilities.\"\n  #?(:clj\n     (:import (java.io StringReader StringWriter)\n              (com.yahoo.platform.yui.compressor CssCompressor))))\n\n;; ---------------------------------------------------------------------\n;; Clojure\n\n;; Clojure stylesheet compression leverages the YUI Compressor as it\n;; provides a performant and excellent solution to CSS compression.\n\n#?(:clj\n   (defn compress-stylesheet\n     \"Compress a stylesheet with the YUI CSSCompressor. Set\n  line-break-position to -1 for no line breaks, 0 for a line break\n  after each rule, and n > 0 for a line break after at most n\n  columns. Defaults to no -1\"\n     ([stylesheet]\n      (compress-stylesheet stylesheet -1))\n     ([^String stylesheet line-break-position]\n      ;; XXX: com.yahoo.platform.yui.compressor.CssCompressor#compress replaces \"0%\" with \"0\" everywhere\n      ;;      which might have worked in 2013 when YUI Compressor 2.4.8 was released, but not anymore in 2019.\n      (with-open [reader (-> stylesheet\n                             (.replaceAll \"(^|[^0-9])0%\" \"$10__YUIHACK__%\")\n                             (StringReader.))\n                  writer (StringWriter.)]\n        (doto (CssCompressor. reader)\n          (.compress writer line-break-position))\n        (-> (str writer)\n            (.replaceAll \"0__YUIHACK__%\" \"0%\"))))))\n\n;; ---------------------------------------------------------------------\n;; ClojureScript\n\n;; ClojureScript stylesheet compression uses a simple tokenizer and\n;; loop/recur to construct a new string of minified CSS.\n\n#?(:cljs\n   (defn- token-fn\n     \"Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag.\"\n     [[tag re]]\n     (fn [s]\n       (when-let [chunk (re-find re s)]\n         {:tag tag\n          :chunk chunk\n          :size (count chunk)}))))\n\n#?(:cljs\n   (defn- tokenizer\n     \"Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.\"\n     [& tags+regexes]\n     (let [fs (map token-fn tags+regexes)]\n       (fn [s]\n         (some #(% s) fs)))))\n\n#?(:cljs\n   (def\n     ^{:private true\n       :doc \"Tokenizer used during stylesheet compression.\"}\n     stylesheet-tokenizer\n     (tokenizer\n      ;; String literals\n      [:string #\"^\\\"(?:\\\\.|[^\\\"])*\\\"\"]\n      ;; Delimiters\n      [:r-brace #\"^\\s*\\{\\s*\"]\n      [:l-brace #\"^;?\\s*}\"]\n      [:r-paren #\"^\\s*\\(\\s*\"]\n      [:l-paren #\"^\\s*\\)\"]\n      [:comma #\"^,\\s*\"]\n      [:colon #\"^:\\s*\"]\n      [:semicolon #\"^;\"]\n      ;; White space\n      [:and #\"^and\\s+\"]\n      [:space+ #\"^ +\"]\n      [:white-space+ #\"^\\s+\"]\n      ;; Everything else\n      [:any #\"^.\"])))\n\n#?(:cljs\n   (defn compress-stylesheet\n     \"Compress a string of CSS using a basic compressor.\"\n     [stylesheet]\n     (loop [s1 stylesheet s2 \"\"]\n       (if-let [{:keys [tag chunk size]} (stylesheet-tokenizer s1)]\n         (recur (subs s1 size)\n                (str s2 (case tag\n                          :string chunk\n                          :r-brace \"{\"\n                          :l-brace \"}\"\n                          :r-paren \"(\"\n                          :l-paren \")\"\n                          :and \"and \"\n                          :comma \",\"\n                          :semi-comma \";\"\n                          :colon \":\"\n                          :space+ \" \"\n                          :white-space+ \"\"\n                          chunk)))\n         s2))))\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;AAuCG;;;;AAAA,AAAAA,AAAOG;AAAP,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAGIG;AAHJ,AAAAF,AAAAD,AAAA,AAAA,AAGQI;AAHR,AAIE;AAAKC;AAAL,AACE,AAAAC,AAAiB,AAACE,AAAQJ,AAAGC;AAA7B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAAA,AAAA,AAAA,AAAA,AACQJ,AACEI,AACD,AAACE,AAAMF;;AAHhB;;;;;AAMJ,AAAA;;;;;;AAAA,AAAAG,AAAOM;AAAP,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAOE,AAKFI;AALL,AAME,AAAMC,AAAG,AAACC,AAAIpB,AAASkB;AAAvB,AACE;AAAKf;AAAL,AACE,AAAA,AAACmB;AAADD;AAAA,AAAO,AAAAA,AAAAA,AAAAA,AAAGlB,AAAAA;;AAAGgB;;;;;AARnB,AAAA,AAAA,AAAOL;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAWA;;;AAGEQ,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAmBH;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAOC,AAAGD;AAAV,AAAqBE;;AAArB,AACE,AAAAC,AAAkC,AAACN,AAAAA,AAAAA,AAAqBI,AAAAA;AAAxD,AAAA,AAAAE;AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiB7B;AAAjB,AAAAiC,AAAAJ,AAAA,AAAqBzB;AAArB,AAAA6B,AAAAJ,AAAA,AAA2BK;AAA3B,AACE,AAAO,AAACC,AAAKT,AAAGQ;AACT,AAAKP,AAAG,AAAAS,AAAMpC;AAANoC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACUhC;;;AADV;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAYEA;;;;;;;;AACjBuB","names",["p__25548","vec__25550","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","garden.compression/token-fn","tag","re","s","temp__5735__auto__","chunk","cljs.core/re-find","cljs.core/count","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","garden.compression/tokenizer","seq25555","self__4718__auto__","cljs.core/seq","tags+regexes","fs","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__25553#","cljs.core/some","garden.compression/stylesheet-tokenizer","garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic","garden.compression/compress-stylesheet","stylesheet","s1","s2","temp__5733__auto__","map__25560","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","size","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","G__25564","cljs.core/Keyword"]]],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1556316222000],["^Z","goog/math/math.js"],[1559507890775,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^O","~$goog.array","~$goog.asserts"]]],["^Z","goog/array/array.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^1A"]]],["^Z","goog/debug/error.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/dom/nodetype.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/object/object.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],"~:SHADOW-TIMESTAMP",[1570818000000,1556316222000],["^Z","goog/math/long.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^1A","~$goog.reflect"]]],["^Z","goog/string/internal.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/functions/functions.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/structs/map.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^Z","goog/asserts/asserts.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^Z","goog/uri/uri.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^1@","^1A","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^Z","goog/base.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",[]]],["^Z","garden/compression.cljc"],[1569047779983,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^N"]]],["^Z","goog/structs/structs.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^1@","~$goog.object"]]],["^Z","goog/string/string.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","~$goog.string.internal"]]],["^Z","goog/reflect/reflect.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/string/stringbuffer.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/iter/iter.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^1@","^1A","~$goog.functions","~$goog.math"]]],["^Z","cljs/core.cljs"],[1556316222100,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["~$goog.math.Long","~$goog.math.Integer","^1H","^1N","^1@","~$goog.Uri","~$goog.string.StringBuffer"]]],["^Z","goog/math/integer.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O"]]],["^Z","goog/uri/utils.js"],[1559507890775,"^1<",["^ ","^1=",null,"^1>",["^G",[]],"^1?",["^O","^1@","^1A","^1H"]]]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Stylesheet compression utilities.","^7","garden/compression.cljc","^8",1,"^9",5,"^:",1,"^;",23],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^L",null,"^M",["^ ","^N","^N","^O","^O"],"^P",["^G",[]],"^Q",null,"~:defs",["^ ","~$token-fn",["^ ","~:protocol-inline",null,"^5",["^ ","^7","garden/compression.cljc","^8",40,"^9",11,"^:",40,"^;",19,"~:private",true,"~:arglists",["^T",["~$quote",["^T",[[["~$tag","~$re"]]]]]],"^6","Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."],"^1Z",true,"^H","~$garden.compression/token-fn","^7","garden/compression.cljc","^;",19,"~:method-params",["^T",[["~$p__25548"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^9",4,"~:variadic?",false,"^8",40,"~:ret-tag","~$function","^:",40,"~:max-fixed-arity",1,"~:fn-var",true,"^1[",["^T",["^20",["^T",[[["^21","^22"]]]]]],"^6","Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."],"~$tokenizer",["^ ","^1Y",null,"^5",["^ ","^1Z",true,"^7","garden/compression.cljc","^;",20,"~:top-fn",["^ ","^28",true,"~:fixed-arity",0,"^2;",0,"^24",[["^T",["~$tags+regexes"]]],"^1[",["^T",[["~$&","^2@"]]],"^27",["^T",[null]]],"^9",11,"^8",51,"^:",51,"^1[",["^T",["^20",["^T",[["~$&","^2@"]]]]],"^6","Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively."],"^1Z",true,"^H","~$garden.compression/tokenizer","^7","garden/compression.cljc","^;",20,"^2>",["^ ","^28",true,"^2?",0,"^2;",0,"^24",[["^T",["^2@"]]],"^1[",["^T",[["~$&","^2@"]]],"^27",["^T",[null]]],"^24",[["^T",["^2@"]]],"^26",null,"^2?",0,"^27",["^T",[null]],"^9",4,"^28",true,"~:methods",[["^ ","^2?",0,"^28",true,"~:tag","^2:"]],"^8",51,"^29","~$any","^:",51,"^2;",0,"^2<",true,"^1[",["^T",[["~$&","^2@"]]],"^6","Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively."],"~$stylesheet-tokenizer",["^ ","^5",["^ ","^7","garden/compression.cljc","^8",65,"^9",6,"^:",65,"^;",26,"^1Z",true,"^6","Tokenizer used during stylesheet compression."],"^1Z",true,"^H","~$garden.compression/stylesheet-tokenizer","^7","garden/compression.cljc","^;",26,"^9",4,"^8",62,"^:",65,"^2C","^2:","^6","Tokenizer used during stylesheet compression."],"~$compress-stylesheet",["^ ","^1Y",null,"^5",["^ ","^7","garden/compression.cljc","^8",85,"^9",10,"^:",85,"^;",29,"^1[",["^T",["^20",["^T",[["~$stylesheet"]]]]],"^6","Compress a string of CSS using a basic compressor."],"^H","~$garden.compression/compress-stylesheet","^7","garden/compression.cljc","^;",29,"^24",["^T",[["^2H"]]],"^26",null,"^27",["^T",[null,null]],"^9",4,"^28",false,"^8",85,"^29","~$string","^:",85,"^2;",1,"^2<",true,"^1[",["^T",["^20",["^T",[["^2H"]]]]],"^6","Compress a string of CSS using a basic compressor."]],"^R",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^G",["~:l-brace","~:l-paren","~:space+","~:comma","~:white-space+","~:string","~:size","~:colon","~:semicolon","~:and","~:r-brace","^2C","~:r-paren","~:chunk","~:any"]],"~:order",["^2C","^2X","^2R","^2Q","^2V","^2L","^2W","^2M","^2O","^2S","^2T","^2U","^2N","^2P","^2Y"]],"^V",["^ "],"^W",["^ "],"^X",["^O","^N"]],"^K","^I","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1:",[["^31","~:static-fns"],true,["^31","~:elide-asserts"],false,["^31","~:optimize-constants"],null,["^31","^11"],null,["^31","~:external-config"],null,["^31","~:tooling-config"],null,["^31","~:emit-constants"],null,["^31","~:load-tests"],null,["^31","~:infer-externs"],true,["^31","^13"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^31","~:fn-invoke-direct"],null,["^31","~:source-map"],"/dev/null"]]]