["^ ","~:output",["^ ","~:js","goog.provide('garden.core');\ngoog.require('cljs.core');\ngoog.require('garden.compiler');\n/**\n * Convert a variable number of Clojure data structure to a string of\n *   CSS. The first argument may be a list of flags for the compiler.\n */\ngarden.core.css = (function garden$core$css(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___27252 = arguments.length;\nvar i__4731__auto___27253 = (0);\nwhile(true){\nif((i__4731__auto___27253 < len__4730__auto___27252)){\nargs__4736__auto__.push((arguments[i__4731__auto___27253]));\n\nvar G__27254 = (i__4731__auto___27253 + (1));\ni__4731__auto___27253 = G__27254;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn garden.core.css.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ngarden.core.css.cljs$core$IFn$_invoke$arity$variadic = (function (rules){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(garden.compiler.compile_css,rules);\n});\n\ngarden.core.css.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ngarden.core.css.cljs$lang$applyTo = (function (seq27250){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq27250));\n});\n\n/**\n * Convert a variable number of maps into a string of CSS for use with\n *   the HTML `style` attribute.\n */\ngarden.core.style = (function garden$core$style(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___27255 = arguments.length;\nvar i__4731__auto___27256 = (0);\nwhile(true){\nif((i__4731__auto___27256 < len__4730__auto___27255)){\nargs__4736__auto__.push((arguments[i__4731__auto___27256]));\n\nvar G__27257 = (i__4731__auto___27256 + (1));\ni__4731__auto___27256 = G__27257;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn garden.core.style.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ngarden.core.style.cljs$core$IFn$_invoke$arity$variadic = (function (maps){\nreturn garden.compiler.compile_style(maps);\n});\n\ngarden.core.style.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ngarden.core.style.cljs$lang$applyTo = (function (seq27251){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq27251));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Convert Clojure data structures to CSS.","~:file","garden/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$garden.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$garden.compiler","^N","~$compiler","^N","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^G",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P","^N","^N","^O","^N"],"~:form",["~#list",["~$ns","^I","Convert Clojure data structures to CSS.",["^W",["^S",["^N","~:as","^O"]]]]],"~:flags",["^ ","^S",["^G",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^N"]],"^K","^I","~:resource-id",["~:shadow.build.classpath/resource","garden/core.cljc"],"~:compiled-at",1570835804543,"~:resource-name","garden/core.cljc","~:warnings",[],"~:source","(ns garden.core\n  \"Convert Clojure data structures to CSS.\"\n  (:require [garden.compiler :as compiler]))\n\n(defn ^String css\n  \"Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler.\"\n  {:arglists '([rules] [flags? rules])}\n  [& rules]\n  (apply compiler/compile-css rules))\n\n(defn ^String style\n  \"Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute.\"\n  [& maps]\n  (compiler/compile-style maps))\n\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAIA,AAAA;;;;AAAA,AAAAA,AAAcM;AAAd,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAcE,AAITI;AAJL,AAKE,AAACC,AAAMC,AAAqBF;;;AAL9B,AAAA,AAAA,AAAcJ;;AAAd;AAAA,AAAA,AAAA,AAAAC,AAAcD;AAAd,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA;;;;AAAA,AAAAP,AAAca;AAAd,AAAA,AAAAZ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAY,AAAAT;;;AAAA,AAAA,AAAA,AAAA,AAAcS,AAGTE;AAHL,AAIE,AAACC,AAAuBD;;;AAJ1B,AAAA,AAAA,AAAcF;;AAAd;AAAA,AAAA,AAAA,AAAAC,AAAcD;AAAd,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAK;;;AAAA","names",["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","garden.core/css","seq27250","self__4718__auto__","cljs.core/seq","rules","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","garden.compiler/compile-css","garden.core/style","seq27251","maps","garden.compiler/compile-style"]]],"~:cache-keys",["~#cmap",[["~:macro","^P"],[1556316222000],["^12","cljs/tools/reader/impl/utils.cljs"],[1559507883302,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^Q","^P","~$clojure.string","~$goog.string"]]],["^12","goog/math/math.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","~$goog.array","~$goog.asserts"]]],["^12","goog/string/stringformat.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1E"]]],["^12","goog/array/array.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1G"]]],["^12","garden/color.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1D","~$garden.util"]]],["^1?","~$cljs.tools.reader.reader-types"],[1559507883000],["^12","goog/debug/error.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","garden/units.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","~$cljs.reader","~$garden.types","^1H"]]],["^1?","^N"],[1569047779000],["^12","cljs/tools/reader/edn.cljs"],[1559507883302,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","~$cljs.tools.reader.impl.errors","^1I","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1E","~$goog.string.StringBuffer"]]],["^12","goog/dom/nodetype.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","cljs/tools/reader/impl/inspect.cljs"],[1559507883302,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P"]]],["^12","cljs/tools/reader.cljs"],[1559507883302,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1I","^1M","^1N","^1L","^1F","^1E","^1P"]]],["^1?","~$garden.color"],[1569047779000],["^12","goog/object/object.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],"~:SHADOW-TIMESTAMP",[1570818000000,1556316222000],["^12","goog/math/long.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1G","~$goog.reflect"]]],["^1?","~$garden.selectors"],[1569047779000],["^12","goog/string/internal.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","goog/functions/functions.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","goog/structs/map.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^12","garden/core.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^N"]]],["^12","cljs/reader.cljs"],[1556316222100,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","~$goog.object","^1O","~$cljs.tools.reader.edn","^1P"]]],["^12","goog/asserts/asserts.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^12","garden/types.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P"]]],["^12","goog/uri/uri.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1F","^1G","^1E","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^12","garden/selectors.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1D"]]],["^12","goog/base.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",[]]],["^12","garden/util.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1D","^1K","^1E","~$goog.string.format"]]],["^12","garden/compression.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P"]]],["^12","goog/structs/structs.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1F","^1W"]]],["^12","cljs/tools/reader/impl/errors.cljs"],[1559507883302,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1I","^1D","~$cljs.tools.reader.impl.inspect"]]],["^12","clojure/string.cljs"],[1556316222100,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1E","^1P"]]],["^12","goog/string/string.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","~$goog.string.internal"]]],["^12","goog/reflect/reflect.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","goog/string/stringbuffer.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","cljs/tools/reader/reader_types.cljs"],[1559507883302,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1M","^1E","^1P"]]],["^12","goog/iter/iter.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1F","^1G","~$goog.functions","~$goog.math"]]],["^12","cljs/tools/reader/impl/commons.cljs"],[1559507883302,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1L","^1I","^1M"]]],["^12","cljs/core.cljs"],[1556316222100,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["~$goog.math.Long","~$goog.math.Integer","^1E","^1W","^1F","~$goog.Uri","^1P"]]],["^12","goog/math/integer.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q"]]],["^12","goog/uri/utils.js"],[1559507890775,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^1F","^1G","^1E"]]],["^12","garden/compiler.cljc"],[1569047779983,"^1@",["^ ","^1A",null,"^1B",["^G",[]],"^1C",["^Q","^P","^1D","^1Q","~$garden.compression","^1T","~$garden.units","^1H","^1K"]]],["^1?","^2="],[1569047779000],["^1?","^1J"],[1556316222000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Convert Clojure data structures to CSS.","^7","garden/core.cljc","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^L",null,"^M",["^ ","^N","^N","^O","^N","^P","^P","^Q","^Q"],"^R",["^G",["^S"]],"^T",null,"~:defs",["^ ","~$css",["^ ","~:protocol-inline",null,"^5",["^ ","^7","garden/core.cljc","^;",18,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",[["^W",["~$rules"]]],"~:arglists",["^W",[["~$&","^2G"]]],"~:arglists-meta",["^W",[null]]],"^9",15,"^8",5,"^:",5,"~:tag","~$String","^2H",["^W",["~$quote",["^W",[["^2G"],["~$flags?","^2G"]]]]],"^6","Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler."],"^H","~$garden.core/css","^7","garden/core.cljc","^;",18,"^2B",["^ ","^2C",true,"^2D",0,"^2E",0,"^2F",[["^W",["^2G"]]],"^2H",["^W",[["~$&","^2G"]]],"^2I",["^W",[null]]],"^2F",[["^W",["^2G"]]],"~:protocol-impl",null,"^2D",0,"^2I",["^W",[null]],"^9",1,"^2C",true,"~:methods",[["^ ","^2D",0,"^2C",true,"^2J","~$any"]],"^8",5,"~:ret-tag","^2K","^:",5,"^2E",0,"^2J","^2K","~:fn-var",true,"^2H",["^W",[["~$&","^2G"]]],"^6","Convert a variable number of Clojure data structure to a string of\n  CSS. The first argument may be a list of flags for the compiler."],"~$style",["^ ","^2A",null,"^5",["^ ","^7","garden/core.cljc","^;",20,"^2B",["^ ","^2C",true,"^2D",0,"^2E",0,"^2F",[["^W",["~$maps"]]],"^2H",["^W",[["~$&","^2U"]]],"^2I",["^W",[null]]],"^9",15,"^8",12,"^:",12,"^2J","^2K","^2H",["^W",["^2L",["^W",[["~$&","^2U"]]]]],"^6","Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute."],"^H","~$garden.core/style","^7","garden/core.cljc","^;",20,"^2B",["^ ","^2C",true,"^2D",0,"^2E",0,"^2F",[["^W",["^2U"]]],"^2H",["^W",[["~$&","^2U"]]],"^2I",["^W",[null]]],"^2F",[["^W",["^2U"]]],"^2O",null,"^2D",0,"^2I",["^W",[null]],"^9",1,"^2C",true,"^2P",[["^ ","^2D",0,"^2C",true,"^2J",["^G",["^2Q","~$clj-nil"]]]],"^8",12,"^2R","^2K","^:",12,"^2E",0,"^2J","^2K","^2S",true,"^2H",["^W",[["~$&","^2U"]]],"^6","Convert a variable number of maps into a string of CSS for use with\n  the HTML `style` attribute."]],"^U",["^ ","^P","^P","^N","^N","^O","^N"],"^Z",["^ ","^S",["^G",[]]],"^[",["^ "],"^10",["^Q","^P","^N"]],"^K","^I","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1>",[["^2Z","~:static-fns"],true,["^2Z","~:elide-asserts"],false,["^2Z","~:optimize-constants"],null,["^2Z","^15"],null,["^2Z","~:external-config"],null,["^2Z","~:tooling-config"],null,["^2Z","~:emit-constants"],null,["^2Z","~:load-tests"],null,["^2Z","~:infer-externs"],true,["^2Z","^17"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2Z","~:fn-invoke-direct"],null,["^2Z","~:source-map"],"/dev/null"]]]